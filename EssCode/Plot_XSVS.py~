# -*- coding: utf-8 -*-
######################################################################################
#######################################################################################
#####################Do XSVS_Plot######### ####################################
####################   Coded by Dr. Yugang Zhang #################################
####################   631-885-4714   ############################################
####################   Email: yuzhang@bnl.gov     ####################################
########################################################################################
#################### or: yuzhangnew@icloud.com , Octa 18, 2015##     ##################################
#######################################################################################
######################################################################################
################################################################################
##############################################################################

'''
Functions:
1) xsvs_plot_histogram( bins,his, dev, trace_mean, 
     model=None, title=None, show=True,show_poisson = False,
     show_bn_K = False,show_bn=True,show_gamma=False, qlist=None,
     print_K=False, scalex=False, show_dev=True, xlim=None,  ylim=None,                     
     output='res_his.png', outDir=None,plotq=None,)

2)  xsvs_plot_histogram2( bins,his, dev, tra =None,
                    scalex=False, show_dev=True, xlim=None,  ylim=None,                     
               output='res_his.png')

3)  xsvs_plot_trace_q( res, output='trace.png')
4)  xsvs_plot_q_para_t( res, para='beta',output='res.png', show_dev = False)
5)  xsvs_plot_t_para_q( res, para='beta',output='res.png',show_dev = False)
6)  xsvs_plot_k_pK( res, plotq=None,output='res_kPk.png', show_poisson=True)
7)  xsvs_plot_k_pK_t_beta( res,  plotq=0, output='res_kPk_tBeta.png')
8)  xsvs_plot( res, strx,stry, stry_err, strz=None, all_in_one=True,output='res.png')
9)  xsvs_plot_k_pK2( res,  plotq=None,output='res.png')

'''

import itertools
import matplotlib.pyplot as plt
#from pylab import *
from XSVS_Functions import nbinomPMF,poisson,peval, gammaDist
from numpy import sort,zeros,arange,sqrt,array, linspace

mcolors = itertools.cycle(['b', 'g', 'r', 'c', 'm', 'y', 'k'])
markers = itertools.cycle(list(plt.Line2D.filled_markers))
lstyles = itertools.cycle(['-', '--', '-.','.',':'])




def xsvs_plot_histogram( bins,his, dev, trace_mean, 
                         model=None, title=None, show=True,
            show_poisson = False,show_bn_K = False,show_bn=True,
                         show_gamma=False,
                         qlist=None,print_K=False,
                    scalex=False, show_dev=True, xlim=None,  ylim=None,                     
               output='res_his.png', outDir=None,plotq=None,):
    #plot the bins (normalized by tra.mean), his, devation,
    #his.shape = [ timebin_lev, noqs ] 
    
    fig = plt.figure()
    fig.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9)
    if plotq is None:fig.set_size_inches(20,10.5)    
    else:fig.set_size_inches(20./2,12.5/1.6)
    
    timebin_lev, noqs = his.shape

    if plotq is not None:noqs=1
    sx= int( round (sqrt(noqs)) )
    if noqs%sx==0:sy=noqs/sx
    else:sy=noqs/sx+1
    
    time_list = [2**i for i in range(timebin_lev)]
    exp_list = time_list
    for qn in range( noqs ):               
        ax = fig.add_subplot(sx,sy,qn+1 )        
        fig.subplots_adjust(wspace = 0.5)
        fig.subplots_adjust(hspace = 0.5) 
        
        for tn in xrange(len(exp_list)):
            marker = markers.next()
            color = mcolors.next()

            if plotq is not None:qn=plotq
            #print qn
            histogramBins = array( bins[tn,qn] )
            hist_data = his[tn,qn]
            hist_err =  dev[tn,qn]
            #if tn==0:print dev[0,0]

            if model is not None:
                x = linspace(histogramBins[0],histogramBins[-1],num=300)
                #print x.shape
                K_= model[tn,qn]['K']['value']
                M= model[tn,qn]['M']['value']
                fit_nbinomPMF = peval(x,[K_,M])

                K = trace_mean['q%i'%qn] * 2**(tn)  #using real count average
                
                fit_poisson = poisson(x,K)
                if show_gamma:
                    K_gm= model[tn,qn]['K_gm']['value']
                    M_gm= model[tn,qn]['M_gm']['value']
                    fit_gamma = gammaDist(x,[K_gm,M_gm])
                
                fit_nbinomPMF_ = peval(x,[K,M])
                if print_K:print 'the fit-K and count K are:  %s--%s'%(K_, K)
            # Plot the histogram for the first q value for all exposures\n",

            # First, get the q value\n",
            #q_val = q_value_list[j]
            if qlist is not None:
                qv = qlist[qn]
                q_txt = r'$q= %.5f$ $\AA^{-1}$'%(qv) 
                #q_txt = r'$q = %.5f $' % (qv)   
             
            else:
                #q_txt = r'$q = Q_%s $' % (qn+1)
                q_txt = r'$q= Q_%s $'%(qn+1) 
            
            #q_txt = r'$q = %.2f \times 10^{-2} \; \AA^{-1}$' % (q_val*1e2)
            # Get the exposure time\n",
            exp_val =  tn
            
            if title is not None:q_txt=r'%s '%title+q_txt            
            ax.set_title(q_txt,fontsize= 20 )
            # Plot the data 
            #x-axis is K/<K>, y-axis is P(K), title = q_txt
            
            if scalex!=False:
##                K_ave=0
##                tsi,tbin,tqs,tfra = tra.shape
##                for si in range(tsi):
##                    K_ave += tra[si][tn,qn].mean() * 2**(tn+1)
                #K_ave= model[tn,qn]['K']['value']
                if model is None:K_= trace_mean['q%i'%qn] * 2**(tn) 
                K_ave=  K_
            else:K_ave=1            
            #print len( histogramBins[:-1]/K_ave)
            #print len(hist_data[:-1])
            #print len(hist_err[:-1])
            if not show_dev:hist_err_ = hist_err *0
            else:hist_err_ = hist_err
            if model is not None:ls=''
            else:ls='--'

            #print (histogramBins[:-1]/K_ave).shape
            #print ls
             
            ax.errorbar(histogramBins[:-1]/K_ave,hist_data,
                     hist_err_, ls=ls, markersize=10, lw=2,                          
                marker=marker,color=color,label=r'%.1f' % (exp_list[tn]))
            
            if model is not None:
                if show_bn:
                    ax.errorbar(x/K_ave,fit_nbinomPMF ,
                    fit_nbinomPMF*0, ls='-',  lw=4,color=color,)
                                #label='nbinomPMF')
                
                if show_gamma:
                    ax.errorbar(x/K_ave,fit_gamma,
                    fit_gamma*0, ls=':',  lw=6, color=color,)
                                #label='gamma')                    
                    
                if show_poisson:
                    #print 'show_poisson as -- line'
                    ax.errorbar(x/K_ave,fit_poisson,
                    fit_poisson*0, ls='--',  lw=6, color=color,)
                                #label='poisson')
                if show_bn_K:
                    ax.errorbar(x/K_ave,fit_nbinomPMF_ ,
                    fit_nbinomPMF*0, ls='-.',  lw=4,color=color,)
                               # label='nbinomPMF_Kcons')
                    

    
        #ax.set_xlim(-1,20)
        if xlim is not None:
            x1,x2=xlim
            ax.set_xlim( x1,x2)
            
        if ylim is not None:
            y1,y2=ylim
            ax.set_ylim( y1,y2)
            
        #ax.set_ylim(1e-4,5)    
        #ax.set_yscale('log')        
        #ax.legend(frameon=0,bbox_to_anchor=(1.2,1),title=r'$t_e$')
        if noqs==1:fontsize=20
        else:fontsize=8
        ax.legend(frameon=0,bbox_to_anchor=(1.0,1),
                  title=r'$t_e$',fontsize=fontsize)
        
        #ax.legend(frameon=0,bbox_to_anchor=(1.1,1),title=r'$t_e$')
        if scalex!=False:ax.set_xlabel(r'$K/ \langle K \rangle$',fontsize=20)
        else:ax.set_xlabel(r'$K$',fontsize=20)
        ax.set_ylabel(r'$P(K)$',fontsize=20)
        
        
    #ax.legend(frameon=0,bbox_to_anchor=(1.0,1),title=r'$t_e$',fontsize=12)
##    legend = ax.legend(loc='upper right', shadow=True)
##    frame = legend.get_frame()
##    frame.set_facecolor('0.90')
##    # Set the fontsize
##    for label in legend.get_texts():
##        label.set_fontsize(10)
##    for label in legend.get_lines():
##        label.set_linewidth(1.5)  # the legend line width

            
    fig.tight_layout()       
    if outDir!=None:output =outDir + output
    #print (output)
    plt.savefig( output )    
    if show:plt.show()



 

def xsvs_plot_histogram2( bins,his, dev, tra =None,
                    scalex=False, show_dev=True, xlim=None,  ylim=None,                     
               output='res_his.png'):
    #plot the bins (normalized by tra.mean), his, devation,
    #his.shape = [ timebin_lev, noqs ] 
    
    fig = plt.figure()
    fig.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9)
    #fig.set_size_inches(20,10.5)
    fig.set_size_inches(16,10) 
        
    timebin_lev, noqs = his.shape
    sx= int( round (sqrt(noqs)) )
    if noqs%sx==0:sy=noqs/sx
    else:sy=noqs/sx+1
    
    time_list = [2**i for i in range(timebin_lev)]
    exp_list = time_list
    for qn in range( noqs ):               
        ax = fig.add_subplot(sx,sy,qn+1 )        
        fig.subplots_adjust(wspace = 0.5)
        fig.subplots_adjust(hspace = 0.5) 
        
        for tn in xrange(len(exp_list)):
            marker = markers.next()
            color = mcolors.next()
             
            histogramBins = array( bins[tn,qn] )
            hist_data = his[tn,qn]
            hist_err =  dev[tn,qn]
            
            # Plot the histogram for the first q value for all exposures\n",

            # First, get the q value\n",
            #q_val = q_value_list[j]             
            q_txt = r'$q = Q_%s; $' % (qn+1)            
            #q_txt = r'$q = %.2f \times 10^{-2} \; \AA^{-1}$' % (q_val*1e2)
            # Get the exposure time\n",
            exp_val =  tn
            ax.set_title(q_txt,fontsize=32)
            # Plot the data 
            #x-axis is K/<K>, y-axis is P(K), title = q_txt
            
            if scalex!=False:
                K_ave=0
                tsi,tbin,tqs,tfra = tra.shape
                for si in range(tsi):
                    K_ave += tra[si][tn,qn].mean()                 
            else:K_ave=1
            #print len( histogramBins[:-1]/K_ave)
            #print len(hist_data[:-1])
            #print len(hist_err[:-1])
            if not show_dev:hist_err *=0
            ax.errorbar(histogramBins[:-1]/K_ave,hist_data,
                     hist_err, ls='--', markersize=10, lw=2,                          
                marker=marker,color=color,label=r'%.1f' % (exp_list[tn]))
   
        #ax.set_xlim(-1,20)
        if xlim is not None:
            x1,x2=xlim
            ax.set_xlim( x1,x2)
            
        if ylim is not None:
            y1,y2=ylim
            ax.set_ylim( y1,y2)
            
        #ax.set_ylim(1e-4,5)    
        #ax.set_yscale('log')        
        #ax.legend(frameon=0,bbox_to_anchor=(1.2,1),title=r'$t_e$')
        ax.legend(frameon=0,bbox_to_anchor=(1.0,1),title=r'$t_e$')
        #ax.legend(frameon=0,bbox_to_anchor=(1.1,1),title=r'$t_e$')
        if scalex!=False:ax.set_xlabel(r'$K/ \langle K \rangle$')
        else:ax.set_xlabel(r'$K$')
        ax.set_ylabel(r'$P(K)$')
        
    plt.savefig( output )    
    plt.show()







def xsvs_plot_trace_q( res, output='trace.png'):

    exp_list = sort(res.keys())
    #data = zeros((len(exp_list),3))
    data = [0,0,0]
    dstr = 'trace'
    q_list = sort(res[exp_list[0]]['data'].keys())
    q_value_list = res[exp_list[0]]['q']
    
    fig = plt.figure()
    fig.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9)    
    fig.set_size_inches(14,8.5) 
    dstr ='trace'
    
    for j in xrange(len(q_list)):
        ax = fig.add_subplot(111 )
        fig.subplots_adjust(wspace = 0.5)
        fig.subplots_adjust(hspace = 0.5)
        i=0
        marker = markers.next()
        color = mcolors.next()        
        Cur= res[exp_list[i]]['data'][q_list[j]]
        #print Cur[dstr].shape
        
        data[1] = Cur[dstr]
        data[0] = range( len(data[1]))        
        ##################
        sep_par = j*0.1 # additive factor to separate the data sets in the plot\n",
        ##################
        qval =q_value_list[j]
        # Plot the contrast as a function of exposure time for all q values
        
        #ax.errorbar(data[:,0],data[:,1]+sep_par,data[:,2],\
                  #  color=color,marker=marker,\
                    #label=r'$%.1f$' % (qval*1e2))
        ax.plot(data[0],data[1]+sep_par,
                'o',ms=5,ls='-',\
             marker=marker,color=color,label=r'$%.1f$' % (qval*1e2))

            
    ax.set_xscale('log')    
    #ax.set_xlim(4e-4,1e-2)
    #ax.set_ylim(0,1.0)
    ax2l = ax.legend(frameon=0,bbox_to_anchor=(1.0,1.0),\
        title=r'$q \times 10^{-2}$ [$\AA^{-1}$]')
    ax2l.get_title().set_fontsize('26')
    
    ax.set_xlabel(r'$t_e$ [s]',fontsize=22)
    ax.set_ylabel(r'$%s$'%dstr,fontsize=22)       
    plt.savefig( output )    
    plt.show()
        
def xsvs_plot_q_para_t( res, para='beta',output='res.png', show_dev = False):

    dstr = para
    timebin_lev, noqs = res.shape
    sx= int( round (sqrt(noqs)) )
    if noqs%sx==0:sy=noqs/sx
    else:sy=noqs/sx+1
    
    time_list = [2**i for i in range(timebin_lev)]
    exp_list = time_list 
    q_list =  range( noqs )
    data = zeros((len(q_list),3))
    fig = plt.figure()
    fig.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9)    
    fig.set_size_inches(14,8.5)
    for i in xrange(len( exp_list  )):        
    
        ax = fig.add_subplot(111 )
        fig.subplots_adjust(wspace = 0.5)
        fig.subplots_adjust(hspace = 0.5)
        
        for j in xrange(len(q_list)):
            marker = markers.next()
            color = mcolors.next()
            #data[j,0] = res[exp_list[i]]['expTime'] #x
            data[j,0] = q_list[j]            
            Cur= res[i,j]
            data[j,1] = Cur[dstr]['value'] #y
            #print Cur[dstr]['value']
            data[j,2] = Cur[dstr]['stddev']  #y_error
            if not show_dev:data[j,2] *=0
            #print data, q_list
        ##################
        sep_par = i*0.1 # additive factor to separate the data sets in the plot\n",
        ##################
        #qval =q_value_list[j]
        tval = exp_list[i]
        #print data[:,0],data[:,1]+ sep_par,data[:,2]
        # Plot the contrast as a function of exposure time for all q values
        #x-aixs is exposure time, y_axis is beta (1/M), error-bar for beta
        #print data
        ax.errorbar(data[:,0],data[:,1]+ sep_par, data[:,2],\
                    color=color,marker=marker,\
                    label=r'$%.1f$' % ( tval))
    #ax.set_xscale('log')
        
    #ax.set_xlim(-1e-3,1.2*1e-2)
    #ax.set_ylim(0,1.0)
    ax2l = ax.legend(frameon=0,bbox_to_anchor=(1.0,1.0),\
        title=r'$t_e $ s ')
    ax2l.get_title().set_fontsize('26')

    #title=r'$q \times 10^{-2}$ [$\AA^{-1}$]')
    
    #ax.set_xlabel(r'q [A^-1]',fontsize=22)
    ax.set_xlabel(r'$q $ [$\AA^{-1}$]',fontsize=22)
    
    ax.set_ylabel(r'$%s$'%dstr,fontsize=22)       
    plt.savefig( output )    
    plt.show()


    
def xsvs_plot_t_para_q( res, para='beta',output='res.png',show_dev = False):

    dstr = para
    timebin_lev, noqs = res.shape
    sx= int( round (sqrt(noqs)) )
    if noqs%sx==0:sy=noqs/sx
    else:sy=noqs/sx+1
    
    time_list = [2**i for i in range(timebin_lev)]
    exp_list = time_list 
    q_list =  range( noqs )
    data = zeros((len(exp_list),3)) 
    
    fig = plt.figure()
    fig.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9)    
    fig.set_size_inches(14,8.5) 
    
    for j in xrange(len(q_list)):
        ax = fig.add_subplot(111 )
        fig.subplots_adjust(wspace = 0.5)
        fig.subplots_adjust(hspace = 0.5)
        
        for i in xrange(len(exp_list)):
            marker = markers.next()
            color = mcolors.next()
            data[i,0] = exp_list[i]
            
            Cur= res[i,j]
            data[i,1] = Cur[dstr]['value'] #y
            #print Cur[dstr]['value']
            data[i,2] = Cur[dstr]['stddev'] #y_error
            if not show_dev:data[i,2] *=0
        ##################
        sep_par = j*0.1 # additive factor to separate the data sets in the plot\n",
        ##################
        qval =q_list[j]
        # Plot the contrast as a function of exposure time for all q values
        #x-aixs is exposure time, y_axis is beta (1/M), error-bar for beta
        ax.errorbar(data[:,0],data[:,1]+sep_par,data[:,2],\
                    color=color,marker=marker,\
                    label=r'$%.1f$' % (qval))
    ax.set_xscale('log')    
    ax.set_xlim(0,20)
    #ax.set_ylim(0,1.0)
    ax2l = ax.legend(frameon=0,bbox_to_anchor=(1.0,1.0),\
        title=r'$q $')
    ax2l.get_title().set_fontsize('26')
    
    ax.set_xlabel(r'$t_e$ [s]',fontsize=22)
    ax.set_ylabel(r'$%s$'%dstr,fontsize=22)       
    plt.savefig( output )    
    plt.show()




def xsvs_plot_k_pK( res, plotq=None,output='res_kPk.png', show_poisson=True):
    exp_list = sort(res.keys()) # Get a sorted list of exposures\n",
    q_list = sort(res[exp_list[0]]['data'].keys()) # Sorted list of qs\n",
    q_value_list = res[exp_list[0]]['q']
    
    fig = plt.figure()
    fig.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9)
    #fig.set_size_inches(20,10.5)
    fig.set_size_inches(16,10)
    
    if plotq!=None:
        jrange=1
        j_used = plotq
    else:
        jrange=len(q_list)
        
    sx= int( round (sqrt(jrange)) )
    if jrange%sx==0:sy=jrange/sx
    else:sy=jrange/sx+1
    
    for J in range( jrange ):               
        ax = fig.add_subplot(sx,sy,J+1 )        
        fig.subplots_adjust(wspace = 0.5)
        fig.subplots_adjust(hspace = 0.5)
        if plotq!=None:j=plotq
        else:j=J
        #print j            
        #for ax, K/<K>~ P(K)        
        for i in xrange(len(exp_list)):
            marker = markers.next()
            color = mcolors.next()
            Cur= res[exp_list[i]]['data']
            histogramBins = Cur[q_list[j]]['histogramBins']
            hist_data = Cur[q_list[j]]['histogram']
            hist_err = Cur[q_list[j]]['histStdDev'] 
            K_ave = Cur[q_list[j]]['K']['value']
            # Plot the histogram for the first q value for all exposures\n",

            # First, get the q value\n",
            q_val = q_value_list[j]            
            q_txt = r'$q = %.2f \times 10^{-2} \; \AA^{-1}$' % (q_val*1e2)
            # Get the exposure time\n",
            exp_val = res[exp_list[i]]['expTime']
            ax.set_title(q_txt)            
            # Plot the fitted negative binomial distribution\n",
            M = Cur[q_list[j]]['M']['value']
            xx = arange(0,100,0.1) # generating a dense mesh for the fitted curve\n",
            # evaluate the negative binomial distribution \n",
            neg_binom = nbinomPMF(xx,K_ave,M) 
            # Plot the data 
            #x-axis is K/<K>, y-axis is P(K), title = q_txt
            ax.errorbar(histogramBins[:-1]/K_ave,hist_data[:-1],
                     hist_err[:-1], ls='',                           
                marker=marker,color=color,label=r'%.2f ms' % (exp_val*1e3))
                            
            #ax1.plot(histogramBins[:-1]/K_ave,hist_data[:-1],'o',ms=3,\
             #       marker=marker,color=color,label=r'%.2f ms' % (exp_val*1e3))
            
            # Plot the data and the fitted curve
            ax.plot(xx/K_ave,neg_binom,'-',color=color)
            if show_poisson:
                pEval = poisson(xx,K_ave)
                ax.plot(xx/K_ave,pEval,'--',color=color) 

                
            #Extract the contrast (1/M, or beta)
            #as a function of exposure for each q value\n",
   
        ax.set_xlim(-1,40)
        ax.set_ylim(1e-6,5)    
        ax.set_yscale('log')        
        #ax.legend(frameon=0,bbox_to_anchor=(1.2,1),title=r'$t_e$')
        ax.legend(frameon=0,bbox_to_anchor=(1.0,1),title=r'$t_e$')
        #ax.legend(frameon=0,bbox_to_anchor=(1.1,1),title=r'$t_e$')
        ax.set_xlabel(r'$K/ \langle K \rangle$')
        ax.set_ylabel(r'$P(K)$')
        
    plt.savefig( output )    
    plt.show()
    

      
def xsvs_plot_k_pK_t_beta( res,  plotq=0, output='res_kPk_tBeta.png'):
    exp_list = sort(res.keys()) # Get a sorted list of exposures\n",
    q_list = sort(res[exp_list[0]]['data'].keys()) # Sorted list of qs\n",
    q_value_list = res[exp_list[0]]['q']
    
    fig = plt.figure()
    fig.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9)
    fig.set_size_inches(16,10)
    
    ax1 = fig.add_subplot(121)
    ax2 = fig.add_subplot(122)
    fig.subplots_adjust(wspace = 0.5)
    fig.subplots_adjust(hspace = 0.5)
    for j in xrange(len(q_list)):        
        beta_data = zeros((len(exp_list),3)) # Container for contrast values\n",
        for i in xrange(len(exp_list)):
            marker = markers.next()
            color = mcolors.next()
            Cur= res[exp_list[i]]['data']
            histogramBins = Cur[q_list[j]]['histogramBins']
            hist_data = Cur[q_list[j]]['histogram']
            hist_err = Cur[q_list[j]]['histStdDev'] 
            K_ave = Cur[q_list[j]]['K']['value']
            # Plot the histogram for the first q value for all exposures\n",
            if j == plotq:
                # First, get the q value\n",
                q_val = q_value_list[j]            
                q_txt = r'$q = %.2f \times 10^{-2} \; \AA^{-1}$' % (q_val*1e2)
                # Get the exposure time\n",
                exp_val = res[exp_list[i]]['expTime']
                ax1.set_title(q_txt)            
                # Plot the fitted negative binomial distribution\n",
                M = Cur[q_list[j]]['M']['value']
                xx = arange(0,100,0.1) # generating a dense mesh for the fitted curve\n",
                # evaluate the negative binomial distribution \n",
                neg_binom = nbinomPMF(xx,K_ave,M) 
                # Plot the data 
                #x-axis is K/<K>, y-axis is P(K), title = q_txt
                ax1.errorbar(histogramBins[:-1]/K_ave,hist_data[:-1],
                             hist_err[:-1], ls='',                           
                        marker=marker,color=color,label=r'%.2f ms' % (exp_val*1e3))
                                    
                #ax1.plot(histogramBins[:-1]/K_ave,hist_data[:-1],'o',ms=3,\
                 #       marker=marker,color=color,label=r'%.2f ms' % (exp_val*1e3))
                
                # Plot the data and the fitted curve
                ax1.plot(xx/K_ave,neg_binom,'-',color=color)
            #Extract the contrast (1/M, or beta)
            #as a function of exposure for each q value\n",
            beta_data[i,0] = res[exp_list[i]]['expTime']
            beta_data[i,1] = Cur[q_list[j]]['beta']['value']
            beta_data[i,2] = Cur[q_list[j]]['beta']['stddev']
        ##################
        sep_par = j*0.1 # additive factor to separate the data sets in the plot\n",
        ##################
        qval =q_value_list[j]
        # Plot the contrast as a function of exposure time for all q values
        #x-aixs is exposure time, y_axis is beta (1/M), error-bar for beta
        ax2.errorbar(beta_data[:,0],beta_data[:,1]+sep_par,beta_data[:,2],\
                    color=color,marker=marker,\
                    label=r'$%.1f$' % (qval*1e2))
                # Adjusting the plots\n",
    #for ax2, t~1/M
    ax2.set_xscale('log')    
    ax2.set_xlim(4e-6,1e0)
    #ax2.set_ylim(0,1.0)
    ax2l = ax2.legend(frameon=0,bbox_to_anchor=(1.3,1.0),\
        title=r'$q \times 10^{-2}$ [$\AA^{-1}$]')
    ax2l.get_title().set_fontsize('10')
    ax2.set_xlabel(r'$t_e$ [s]')
    ax2.set_ylabel(r'$1/M$')
    
    #for ax1, K/<K>~ P(K)
    ax1.set_xlim(-1,40)
    #ax1.set_ylim(1e-4,5)
    ax1.set_ylim(1e-6,5)
    ax1.set_yscale('log')
    
    ax1.legend(frameon=0,bbox_to_anchor=(1.2,1),title=r'$t_e$')
    ax1.set_xlabel(r'$K/ \langle K \rangle$')
    ax1.set_ylabel(r'$P(K)$') 
    plt.savefig( output )    
    plt.show()





    

def xsvs_plot( res, strx,stry, stry_err, strz=None,
               all_in_one=True,output='res.png'):
    exp_list = sort(res.keys()) # Get a sorted list of exposures\n",
    q_list = sort(res[exp_list[0]]['data'].keys()) # Sorted list of qs\n",
    q_value_list = res[exp_list[0]]['q']
    
    fig = plt.figure()
    fig.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9)
    #fig.set_size_inches(20,10.5)
    fig.set_size_inches(16,10)
    
    if strz!=None:
        jrange=1
        j_used = plotq
    else:
        jrange=len(q_list)
        
    sx= int( round (sqrt(jrange)) )
    if jrange%sx==0:sy=jrange/sx
    else:sy=jrange/sx+1
    
    for J in range( jrange ):               
        ax = fig.add_subplot(sx,sy,J+1 )        
        fig.subplots_adjust(wspace = 0.5)
        fig.subplots_adjust(hspace = 0.5)
        if plotq!=None:j=plotq
        else:j=J
        #print j            
        #for ax, K/<K>~ P(K)
        
        for i in xrange(len(exp_list)):
            marker = markers.next()
            color = mcolors.next()
            Cur= res[exp_list[i]]['data']
            histogramBins = Cur[q_list[j]][strx]
            hist_data = Cur[q_list[j]][stry]
            hist_err = Cur[q_list[j]][stry_err]
            
            # Plot the histogram for the first q value for all exposures\n",

            # First, get the q value\n",
            q_val = q_value_list[j]            
            q_txt = r'$q = %.2f \times 10^{-2} \; \AA^{-1}$' % (q_val*1e2)
            # Get the exposure time\n",
            exp_val = res[exp_list[i]]['expTime']
            ax.set_title(q_txt)
            # Plot the data 
            #x-axis is K/<K>, y-axis is P(K), title = q_txt
            
            if scalex!=None:K_ave = Cur[q_list[j]][scalex]['value']
            else:K_ave=1
            ax.errorbar(histogramBins[:-1]/K_ave,hist_data[:-1],
                     hist_err[:-1], ls='',                           
                marker=marker,color=color,label=r'%.2f ms' % (exp_val*1e3))
     
            if fitp!=None:
                f1,f2=fitp
                K_ave = Cur[q_list[j]][f1]['value']
                # Plot the fitted negative binomial distribution\n",
                M = Cur[q_list[j]][f2]['value']
                xx = arange(0,100,0.1) # generating a dense mesh for the fitted curve\n",
                # evaluate the negative binomial distribution \n",         
                # Plot the data and the fitted curve
                neg_binom = fitfunc(xx,K_ave,M) 
                ax.plot(xx/K_ave,neg_binom,'-',color=color)

   
        ax.set_xlim(-1,20)
        ax.set_ylim(1e-4,5)    
        ax.set_yscale('log')        
        #ax.legend(frameon=0,bbox_to_anchor=(1.2,1),title=r'$t_e$')
        ax.legend(frameon=0,bbox_to_anchor=(1.0,1),title=r'$t_e$')
        #ax.legend(frameon=0,bbox_to_anchor=(1.1,1),title=r'$t_e$')
        ax.set_xlabel(r'$K/ \langle K \rangle$')
        ax.set_ylabel(r'$P(K)$')
        
    plt.savefig( output )    
    plt.show()


def xsvs_plot_k_pK2( res,  plotq=None,output='res.png'):
    strx ='histogramBins'
    stry='histogram'
    stry_err='histStdDev'
    fitp=['K','M']
    scalex='K'
    fitfunc=nbinomPMF
    xsvs_plot(res,strx ,stry, stry_err,scalex,fitp, fitfunc,plotq,output)
    

